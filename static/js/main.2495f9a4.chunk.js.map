{"version":3,"sources":["components/Board/Slash/Slash.module.scss","components/Board/Square/Square.module.scss","components/DropDownSelect/DropDownSelect.module.scss","components/Board/Board.module.scss","App.module.scss","components/Button/Button.module.scss","components/Sidebar/Sidebar.module.scss","utils/gameUtils.ts","components/Board/Slash/Slash.tsx","components/Board/Square/O.tsx","components/Board/Square/X.tsx","components/Board/Square/Square.tsx","components/Board/Board.tsx","utils/helpers.ts","utils/cpu.ts","components/Button/Button.tsx","components/DropDownSelect/DropdownSelect.tsx","components/Sidebar/Sidebar.tsx","App.tsx","Types/GameArray.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","slash","hidden","rot90","rot180","rot270","stroke-pulse","square","content","clickable","input","arrow-down","options","option","container","board","app","button","data","nextMove","gameArr","xCount","oCount","blanks","r","length","c","push","updateGameArr","val","newGameArr","Object","toConsumableArray","concat","slice","isLineMatch","line","isGameOver","counts","getValCounts","X","row","isMatch","col","_i","_diagCoords","coords","map","_","O","cornerCoords","sideCoords","middleCoord","isCorner","coord","isSide","isMiddle","getOppositeCorner","Slash","_ref","winningSquares","react_default","a","createElement","className","classNames","styles","rotClass","path","join","svg","viewBox","d","slashClass","width","cx","cy","stroke","fill","strokeWidth","strokeLinecap","Square","_classNames","handleClick","status","gameOver","isBlank","squareClass","defineProperty","empty","Square_X","Square_O","onClick","Board","setGameArr","useEffect","handleKeyPress","ev","test","key","n","Math","floor","clickSquare","document","addEventListener","removeEventListener","currentSymbol","squares","Board_Square_Square","Board_Slash_Slash","randInt","min","max","ceil","random","randElement","CPU","strategy","name","_this","this","classCallCheck","makeMove","moveCoord","valCoords","getValCoords","moveArr","createMoveObj","sym","oppSym","obj","wins","oppWins","setsOfOne","setsOfTwo","blocks","oppSetsOfTwo","_coord","slicedToArray","isInLeftDiag","isInRightDiag","rowCounts","colCounts","lDiagCounts","rc","rDiagCounts","sumCondition","conditions","reduce","sum","countObj","keys","every","move","hard","scores","m","maxScore","apply","bestMoves","filter","i","cpus","easy","medium","obviousScores","pow","score","rand","perfect","oppositeCorner","x","o","notX","notO","notOpp","c1","c2","opp1","areOpposites","oppCorner","Button","children","DropdownSelect","onSelect","value","_useState","useState","_useState2","isOpen","setOpen","currentEntry","entries","find","entry","currentString","Sidebar","playerScores","playerNames","message","newGame","handlePlayerChange","players","handleKeypress","playerObj","objectSpread","Player 2","DropDownSelect_DropdownSelect","player","components_Button_Button","App","_useState3","_useState4","setPlayerScores","_useState5","_useState6","firstPlayer","setFirstPlayer","_useState7","_useState8","setMessage","_useState9","_useState10","setPlayers","_useState11","_useState12","gameOverHandled","setGameOverHandled","_useState13","_useState14","gameCount","setGameCount","getPlayerIndexFromSymbol","s","resetGame","winner","newPlayerScores","setTimeout","currentPlayerIndex","components_Sidebar_Sidebar","newPlayer","playerIndex","components_Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2495f9a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"slash\":\"Slash_slash__3oXwl\",\"hidden\":\"Slash_hidden__3IQzb\",\"rot90\":\"Slash_rot90__ZUDb0\",\"rot180\":\"Slash_rot180__yaHhl\",\"rot270\":\"Slash_rot270__1ADGf\",\"stroke-pulse\":\"Slash_stroke-pulse__3BQDi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Square_square__1S6UE\",\"content\":\"Square_content__1txZj\",\"clickable\":\"Square_clickable__3zakr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"DropDownSelect_input__1lxOd\",\"arrow-down\":\"DropDownSelect_arrow-down__1hD_O\",\"options\":\"DropDownSelect_options__3AGu1\",\"option\":\"DropDownSelect_option__UhmEk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Board_container__15NyP\",\"board\":\"Board_board__kNpEF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"data\":\"Sidebar_data__2aZf-\"};","import { GameArray, Line } from '../Types/GameArray';\nimport { SquareVal, XO } from '../Types/SquareVal';\nimport { Coord, lineIndex, WinningCoords } from '../Types/WinningCoords';\n\ntype ValCounts = { [key in SquareVal]: number };\nexport type ValCoords = { [key in SquareVal]: Coord[] };\n\nexport const nextMove = (gameArr: GameArray): XO | null => {\n  if (!gameArr || !gameArr[0]) return null;\n  let xCount = 0;\n  let oCount = 0;\n  const blanks = [];\n\n  for (let r = 0; r < gameArr.length; r++) {\n    for (let c = 0; c < gameArr[0].length; c++) {\n      if (gameArr[r][c] === 'X') xCount++;\n      else if (gameArr[r][c] === 'O') oCount++;\n      else if (gameArr[r][c] === '_') blanks.push([r, c]);\n    }\n  }\n\n  if (!blanks.length) return null;\n\n  return xCount > oCount ? 'O' : 'X';\n};\n\nexport const updateGameArr = (gameArr: GameArray, r: lineIndex, c: lineIndex, val: XO): GameArray => {\n  if (gameArr[r][c] !== '_') return gameArr;\n  const newGameArr = [...gameArr] as GameArray;\n  newGameArr[r] = [...gameArr[r].slice(0, c), val, ...gameArr[r].slice(c + 1)] as Line;\n  return newGameArr as GameArray;\n};\n\nconst isLineMatch = (line: Line): SquareVal | false => {\n  if (line[0] !== '_' && line[0] === line[1] && line[0] === line[2]) {\n    return line[0];\n  } else return false;\n};\n\nexport const isGameOver = (gameArr: GameArray): false | [SquareVal, WinningCoords | null] => {\n  const counts = getValCounts(gameArr);\n  if (counts.X < 3) return false;\n\n  // check rows\n  for (let r = 0; r < gameArr.length; r++) {\n    const row = gameArr[r];\n    const isMatch = isLineMatch(row);\n    if (isMatch) return [isMatch, [[r, 0], [r, 1], [r, 2]] as WinningCoords];\n  }\n\n  // check cols\n  for (let c = 0; c < gameArr.length; c++) {\n    const col: Line = [gameArr[0][c], gameArr[1][c], gameArr[2][c]];\n    const isMatch = isLineMatch(col);\n    if (isMatch) return [isMatch, [[0, c], [1, c], [2, c]] as WinningCoords];\n  }\n  // check diagonals\n  const diagCoords: WinningCoords[] = [[[0, 0], [1, 1], [2, 2]], [[0, 2], [1, 1], [2, 0]]];\n  for (let coords of diagCoords) {\n    const coordToVal = (c: Coord) => gameArr[c[0]][c[1]];\n    const isMatch = isLineMatch(coords.map(coordToVal) as Line);\n    if (isMatch) return [isMatch, coords];\n  }\n  if (!counts._) return ['_', null];\n\n  return false;\n};\n\nexport const getValCounts = (gameArr: GameArray): ValCounts => {\n  const counts: ValCounts = { X: 0, O: 0, _: 0 };\n\n  for (let r = 0; r < gameArr.length; r++) {\n    for (let c = 0; c < gameArr[0].length; c++) {\n      counts[gameArr[r][c]]++;\n    }\n  }\n\n  return counts;\n};\n\nexport const getValCoords = (gameArr: GameArray): ValCoords => {\n  const coords: ValCoords = { X: [], O: [], _: [] };\n\n  for (let r = 0; r < gameArr.length; r++) {\n    for (let c = 0; c < gameArr[0].length; c++) {\n      coords[gameArr[r][c]].push([r as lineIndex, c as lineIndex]);\n    }\n  }\n\n  return coords;\n};\n\nexport const gameToString = (gameArr: GameArray): string => {\n  let str = '';\n  for (let r = 0; r < gameArr.length; r++) {\n    for (let c = 0; c < gameArr[0].length; c++) {\n      str += gameArr[r][c];\n    }\n  }\n  return str;\n};\n\nexport const cornerCoords: Coord[] = [[0, 0], [0, 2], [2, 0], [2, 2]];\nexport const sideCoords: Coord[] = [[0, 1], [1, 0], [1, 2], [2, 1]];\nexport const middleCoord: Coord = [1, 1];\n\nexport const isCorner = (coord: Coord): boolean => coord[0] !== 1 && coord[1] !== 1;\nexport const isSide = (coord: Coord): boolean => coord[0] !== coord[1] && (coord[0] === 1 || coord[1] === 1);\nexport const isMiddle = (coord: Coord): boolean => coord[0] === 1 && coord[1] === 1;\n\nexport const getOppositeCorner = (c: Coord): Coord | null => (isCorner(c) ? [c[0] ? 0 : 2, c[1] ? 0 : 2] : null);\n\nexport const areOpposites = (c1: Coord, c2: Coord): boolean => {\n  const opp1 = getOppositeCorner(c1);\n  if (!opp1) return false;\n  return opp1[0] === c2[0] && opp1[1] === c2[1];\n};\n\nexport const shareLine = (c1: Coord, c2: Coord): boolean => c1[0] === c2[0] || c1[1] === c2[1];\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { WinningCoords } from '../../../Types/WinningCoords';\nimport styles from './Slash.module.scss';\n\n/*eslint no-fallthrough: 0*/\nconst diagPath = 'M 3,3 L 97,97';\nconst sidePath = 'M 3,16 L 97,16';\nconst middlePath = 'M 3,50 L 97,50';\n\ntype SlashProps = {\n  winningSquares: null | WinningCoords;\n};\n\nconst Slash = ({ winningSquares }: SlashProps) => {\n  if (!winningSquares) return <div className={classNames(styles.slash, styles.hidden)} />;\n\n  let rotClass = '';\n  let path = '';\n\n  const goesThroughMiddle = winningSquares[1].join('') === '11';\n  if (goesThroughMiddle) {\n    switch (winningSquares[0].join('')) {\n      case '02':\n        rotClass = styles.rot90;\n      case '00':\n        path = diagPath;\n        break;\n      case '01':\n        rotClass = styles.rot90;\n      case '10':\n        path = middlePath;\n        break;\n    }\n  } else {\n    const stringCoord = winningSquares.join(';');\n    path = sidePath;\n    switch (stringCoord) {\n      case '0,2;1,2;2,2':\n        rotClass = styles.rot90;\n        break;\n      case '2,0;2,1;2,2':\n        rotClass = styles.rot180;\n        break;\n      case '0,0;1,0;2,0':\n        rotClass = styles.rot270;\n        break;\n    }\n  }\n\n  const svg = (\n    <svg viewBox=\"0 0 100 100\">\n      <path d={path} />\n    </svg>\n  );\n\n  const slashClass = classNames(styles.slash, rotClass);\n  return <div className={slashClass}>{svg}</div>;\n};\n\nexport default Slash;\n","import React from 'react';\n\nconst O: React.FC = () => {\n  return (\n    <svg viewBox=\"0 0 100 100\" width=\"100%\">\n      <circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"black\" fill=\"transparent\" strokeWidth=\"10\" />\n    </svg>\n  );\n};\n\nexport default O;\n","import React from 'react';\n\nconst X: React.FC = () => {\n  return (\n    <svg viewBox=\"0 0 100 100\" width=\"100%\">\n      <path stroke=\"black\" strokeWidth=\"11\" fill=\"transparent\" strokeLinecap=\"round\" d=\"M 7,7 L 93,93 M 93,7 L 7,93\" />\n    </svg>\n  );\n};\n\nexport default X;\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { SquareVal } from '../../../Types/SquareVal';\nimport O from './O';\nimport styles from './Square.module.scss';\nimport X from './X';\n\ntype SquareProps = {\n  handleClick: Function;\n  status: SquareVal;\n  gameOver: boolean;\n};\n\nconst Square = ({ handleClick, status, gameOver }: SquareProps) => {\n  const isBlank = status === '_';\n\n  const squareClass = classNames({\n    [styles.square]: true,\n    [styles.clickable]: isBlank && !gameOver,\n  });\n\n  const content = isBlank ? <div className={styles.empty} /> : status === 'X' ? <X /> : <O />;\n\n  return (\n    <div className={squareClass} onClick={() => isBlank && !gameOver && handleClick()}>\n      <div className={styles.content}>{content}</div>\n    </div>\n  );\n};\n\nexport default Square;\n","import React, { useEffect } from 'react';\n\nimport { GameArray, Line } from '../../Types/GameArray';\nimport { SquareVal, XO } from '../../Types/SquareVal';\nimport { lineIndex } from '../../Types/WinningCoords';\nimport { isGameOver, nextMove, updateGameArr } from '../../utils/gameUtils';\nimport styles from './Board.module.scss';\nimport Slash from './Slash/Slash';\nimport Square from './Square/Square';\n\ntype BoardProps = {\n  gameArr: GameArray;\n  setGameArr: (arg0: GameArray) => void;\n};\n\nconst Board = ({ gameArr, setGameArr }: BoardProps) => {\n  const gameOver = !gameArr ? null : isGameOver(gameArr);\n  useEffect(() => {\n    const handleKeyPress = (ev: KeyboardEvent) => {\n      if (!gameArr || gameOver) return;\n      if (/^[1-9]$/.test(ev.key)) {\n        const n = +ev.key - 1;\n        const r = (2 - Math.floor(n / 3)) as lineIndex;\n        const c = (n % 3) as lineIndex;\n        clickSquare(r, c)();\n      }\n    };\n    document.addEventListener('keypress', handleKeyPress);\n    return () => document.removeEventListener('keypress', handleKeyPress);\n  }, [gameArr, gameOver]);\n\n  if (!gameArr) return null;\n  const winningSquares = gameOver ? gameOver[1] : null;\n  const currentSymbol = nextMove(gameArr);\n\n  const clickSquare = (r: lineIndex, c: lineIndex) => () => {\n    const newGameArr = updateGameArr(gameArr, r, c, currentSymbol as XO);\n    setGameArr(newGameArr);\n  };\n\n  const squares = gameArr.map((row: Line, r: number) =>\n    row.map((val: string, c: number) => (\n      <Square\n        key={'square' + (r * 3 + c)}\n        gameOver={!!gameOver}\n        handleClick={clickSquare(r as lineIndex, c as lineIndex)}\n        status={val as SquareVal}\n      />\n    ))\n  );\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.board}>\n        {squares}\n        <Slash winningSquares={winningSquares} />\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","export const randInt = (min: number, max: number): number => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const randElement = <T>(a: T[]): T => a[randInt(0, a.length - 1)];\n","import { GameArray } from '../Types/GameArray';\nimport { SquareVal, XO } from '../Types/SquareVal';\nimport { Coord, lineIndex } from '../Types/WinningCoords';\nimport {\n  areOpposites,\n  cornerCoords,\n  getOppositeCorner,\n  getValCoords,\n  isCorner,\n  isMiddle,\n  isSide,\n  middleCoord,\n  shareLine,\n  sideCoords,\n  updateGameArr,\n  ValCoords,\n} from './gameUtils';\nimport { randElement, randInt } from './helpers';\n\ntype MoveObject = {\n  row: lineIndex;\n  col: lineIndex;\n  wins: boolean;\n  oppWins: boolean;\n  setsOfOne: number;\n  setsOfTwo: number;\n  oppSetsOfTwo: number;\n  blocks: number;\n};\n\ntype Strategy = (moveArr: MoveObject[], gameArr?: GameArray, valCoords?: ValCoords) => Coord;\n\nexport class CPU {\n  private strategy: Strategy;\n  public name: string;\n\n  constructor(strategy: Strategy, name: string) {\n    this.strategy = strategy;\n    this.name = name;\n  }\n\n  public makeMove = (gameArr: GameArray): GameArray => {\n    const valCoords: ValCoords = getValCoords(gameArr);\n\n    const currentSymbol: XO = valCoords.X.length > valCoords.O.length ? 'O' : 'X';\n\n    let moveCoord: Coord;\n    if (valCoords._.length === 1) {\n      moveCoord = valCoords._[0];\n    } else {\n      const moveArr: MoveObject[] = valCoords._.map(coord => CPU.createMoveObj(gameArr, coord, currentSymbol));\n      moveCoord = this.strategy(moveArr, gameArr, valCoords);\n    }\n\n    const newGameArr = updateGameArr(gameArr, moveCoord[0], moveCoord[1], currentSymbol);\n\n    return newGameArr;\n  };\n\n  private static createMoveObj = (gameArr: GameArray, coord: Coord, sym: XO): MoveObject => {\n    const oppSym = sym === 'X' ? 'O' : 'X';\n    const obj = {\n      row: coord[0],\n      col: coord[1],\n      wins: false,\n      oppWins: false,\n      setsOfOne: 0,\n      setsOfTwo: 0,\n      blocks: 0,\n      oppSetsOfTwo: 0,\n    };\n    const [row, col] = coord;\n    const isInLeftDiag = row === col;\n    const isInRightDiag = row + col === 2;\n\n    const rowCounts = { X: 0, O: 0, _: 0 };\n    for (let c = 0; c <= 2; c++) {\n      if (c === col) continue;\n      rowCounts[gameArr[row][c]]++;\n    }\n    const colCounts = { X: 0, O: 0, _: 0 };\n    for (let r = 0; r <= 2; r++) {\n      if (r === row) continue;\n      colCounts[gameArr[r][col]]++;\n    }\n    const lDiagCounts = { X: 0, O: 0, _: 0 };\n    for (let rc = 0; isInLeftDiag && rc <= 2; rc++) {\n      if (rc === row && rc === col) continue;\n      lDiagCounts[gameArr[rc][rc]]++;\n    }\n    const rDiagCounts = { X: 0, O: 0, _: 0 };\n    for (let rc = 0; isInRightDiag && rc <= 2; rc++) {\n      if (rc === row && 2 - rc === col) continue;\n      rDiagCounts[gameArr[rc][2 - rc]]++;\n    }\n\n    const n = (b: boolean) => (b ? 1 : 0);\n    const sumCondition = (conditions: { [key: string]: number }): number => {\n      const counts = [rowCounts, colCounts, lDiagCounts, rDiagCounts];\n      return counts.reduce(\n        (sum, countObj) =>\n          sum + n(Object.keys(conditions).every(key => countObj[key as SquareVal] === conditions[key as SquareVal])),\n        0\n      );\n    };\n    obj.wins = !!sumCondition({ [sym]: 2 });\n    obj.oppWins = !!sumCondition({ [oppSym]: 2 });\n    obj.setsOfOne = sumCondition({ _: 2 });\n    obj.setsOfTwo = sumCondition({ _: 1, [sym]: 1 });\n    obj.oppSetsOfTwo = sumCondition({ _: 1, [oppSym]: 1 });\n    obj.blocks = sumCondition({ _: 1, [oppSym]: 1 });\n    return obj;\n  };\n}\n\nconst random: Strategy = moveArr => {\n  const moveIndex = randInt(0, moveArr.length - 1);\n  const move = moveArr[moveIndex];\n  return [move.row, move.col];\n};\n\nconst first: Strategy = moveArr => {\n  const move = moveArr[0];\n  return [move.row, move.col];\n};\n\nconst easy: Strategy = moveArr => {\n  const scores = moveArr.map(m => +m.wins * 50 + +m.oppWins * 15);\n  const maxScore = Math.max(...scores);\n  const bestMoves = moveArr.filter((m, i) => scores[i] === maxScore);\n  return random(bestMoves);\n};\n\nconst medium: Strategy = moveArr => {\n  const obviousScores = moveArr.map(m => +m.wins * 50 + +m.oppWins * 15);\n  const maxScore = Math.max(...obviousScores);\n  const bestMoves = moveArr.filter((m, i) => obviousScores[i] === maxScore);\n  if (bestMoves.length < moveArr.length) {\n    return random(bestMoves);\n  }\n\n  const scores = moveArr.map(m => (+m.wins * 50 + +m.oppWins * 15 + m.setsOfOne + m.setsOfTwo * 2 + m.blocks) ** 2);\n  const sum = scores.reduce((sum, score) => sum + score);\n  let rand = randInt(0, sum - 1);\n  for (let i = 0; i < scores.length; i++) {\n    if (rand < scores[i]) return [moveArr[i].row, moveArr[i].col];\n    rand -= scores[i];\n  }\n  return random(moveArr);\n};\n\nconst hard: Strategy = moveArr => {\n  const scores = moveArr.map(\n    m => +m.wins * 50 + +m.oppWins * 15 + m.setsOfOne + m.setsOfTwo * 2 + m.blocks + m.oppSetsOfTwo * 2\n  );\n  const maxScore = Math.max(...scores);\n  const bestMoves = moveArr.filter((m, i) => scores[i] === maxScore);\n  return random(bestMoves);\n};\n\nconst perfect: Strategy = (moveArr, gameArr, valCoords) => {\n  // The first couple moves are the only situations where hard doesn't act optimally\n  if (gameArr && valCoords) {\n    if (valCoords.X.length === 0) {\n      return randElement(cornerCoords);\n    } else if (valCoords.O.length === 0) {\n      if (isMiddle(valCoords.X[0])) {\n        return randElement(cornerCoords);\n      }\n    } else if (valCoords.X.length === 1) {\n      const oppositeCorner = getOppositeCorner(valCoords.X[0]);\n      if (!oppositeCorner) return hard(moveArr);\n      const x = valCoords.X[0];\n      const o = valCoords.O[0];\n      if (isMiddle(o)) {\n        return oppositeCorner;\n      } else if (isSide(o)) {\n        return middleCoord;\n      } else if (isCorner(o)) {\n        // return random open adjacent corner\n        const notX = (c: Coord): boolean => !(c[0] === x[0] && c[1] === x[1]);\n        const notO = (c: Coord): boolean => !(c[0] === o[0] && c[1] === o[1]);\n        const notOpp = (c: Coord): boolean => !(c[0] === oppositeCorner[0] && c[1] === oppositeCorner[1]);\n        return randElement(cornerCoords.filter(c => notX(c) && notO(c) && notOpp(c)));\n      }\n    } else if (valCoords.O.length === 1) {\n      if (isMiddle(valCoords.O[0]) && !shareLine(valCoords.X[0], valCoords.X[1])) {\n        if (areOpposites(valCoords.X[0], valCoords.X[1])) {\n          return randElement(sideCoords);\n        } else if (isCorner(valCoords.X[0]) && isSide(valCoords.X[1])) {\n          const oppCorner = getOppositeCorner(valCoords.X[0]);\n          if (oppCorner) return oppCorner;\n        } else if (isCorner(valCoords.X[1]) && isSide(valCoords.X[0])) {\n          const oppCorner = getOppositeCorner(valCoords.X[1]);\n          if (oppCorner) return oppCorner;\n        }\n      }\n    }\n  }\n  return hard(moveArr);\n};\n\nexport const cpus = {\n  random: new CPU(random, 'Random'),\n  easy: new CPU(easy, 'Easy'),\n  medium: new CPU(medium, 'Medium'),\n  hard: new CPU(hard, 'Hard'),\n  perfect: new CPU(perfect, 'Perfect'),\n};\n","import React, { ReactNode } from 'react';\n\nimport styles from './Button.module.scss';\n\ntype ButtonProps = {\n  onClick: (...args: any[]) => any;\n  children: ReactNode;\n};\n\nconst Button = ({ onClick, children }: ButtonProps) => {\n  return (\n    <button className={styles.button} onClick={() => onClick()}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState } from 'react';\n\nimport styles from './DropDownSelect.module.scss';\n\ntype DropdownSelectProps = {\n  onSelect: (newValue: any) => void;\n  value: any;\n  options: { [key: string]: any };\n};\n\nconst DropdownSelect = ({ onSelect, value, options }: DropdownSelectProps) => {\n  const [isOpen, setOpen] = useState(false);\n  const currentEntry = Object.entries(options).find(entry => entry[1] === value);\n  const currentString = currentEntry ? currentEntry[0] : '';\n\n  const toggleOpen = () => setOpen(!isOpen);\n  return (\n    <div className={styles.input} onClick={() => toggleOpen()}>\n      {currentString}\n      <div className={styles['arrow-down']} />\n      {isOpen && (\n        <div className={styles.options}>\n          {Object.entries(options).map(entry => (\n            <div key={entry[0] + entry[1]} className={styles.option} onClick={() => onSelect(entry[1])}>\n              {entry[0]}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DropdownSelect;\n","import React, { useEffect } from 'react';\n\nimport { Player, PlayerArr, PlayerIndex } from '../../App';\nimport { cpus } from '../../utils/cpu';\nimport Button from '../Button/Button';\nimport DropdownSelect from '../DropDownSelect/DropdownSelect';\nimport styles from './Sidebar.module.scss';\n\ntype SidebarProps = {\n  players: PlayerArr;\n  playerScores: number[];\n  playerNames: string[];\n  message: string;\n  isGameOver: boolean;\n  newGame: () => void;\n  handlePlayerChange: (newPlayer: Player, playerIndex: PlayerIndex) => void;\n};\n\nconst Sidebar = ({\n  playerScores,\n  playerNames,\n  message,\n  isGameOver,\n  newGame,\n  handlePlayerChange,\n  players,\n}: SidebarProps) => {\n  useEffect(() => {\n    const handleKeypress = (ev: KeyboardEvent) => {\n      if (isGameOver && ev.key === 'Enter') newGame();\n    };\n    document.addEventListener('keypress', handleKeypress);\n    return () => document.removeEventListener('keypress', handleKeypress);\n  }, [isGameOver]);\n\n  const playerObj: { [key: string]: Player } = {\n    'Player 2': null,\n    ...cpus,\n  };\n\n  return (\n    <div className={styles.data}>\n      <h1>Tic Tac Toe</h1>\n      <h3>Counts:</h3>\n      <h4>\n        {playerNames[0]}: {playerScores[0]}\n      </h4>\n      <h4>\n        {players[1] ? 'CPU (' : ''}\n        {\n          <DropdownSelect\n            value={players[1]}\n            options={playerObj}\n            onSelect={(player: Player) => handlePlayerChange(player, 1)}\n          />\n        }\n        {players[1] ? ')' : ''}: {playerScores[1]}\n      </h4>\n      <h3>{message}</h3>\n      {isGameOver && <Button onClick={() => newGame()}>New Game</Button>}\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, { useState } from 'react';\n\nimport styles from './App.module.scss';\nimport Board from './components/Board/Board';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport { newGameArray } from './Types/GameArray';\nimport { XO } from './Types/SquareVal';\nimport { CPU, cpus } from './utils/cpu';\nimport { isGameOver, nextMove } from './utils/gameUtils';\n\nexport type Player = CPU | null; // null indicates human\nexport type PlayerArr = [Player, Player];\nexport type PlayerIndex = 0 | 1;\n\nconst App: React.FC = () => {\n  const [gameArr, setGameArr] = useState(newGameArray());\n  const [playerScores, setPlayerScores] = useState([0, 0]);\n  const [firstPlayer, setFirstPlayer] = useState(0 as PlayerIndex);\n  const getStartMessage = (): string => 'You are ' + ['X', 'O'][firstPlayer];\n  const [message, setMessage] = useState(getStartMessage());\n  const [players, setPlayers] = useState([null, cpus.medium] as PlayerArr);\n  const [gameOverHandled, setGameOverHandled] = useState(false);\n  const [gameCount, setGameCount] = useState(0);\n\n  const getPlayerIndexFromSymbol = (s: XO) => (s === 'X' ? firstPlayer : (+!firstPlayer as PlayerIndex));\n\n  let playerNames = players.map(val => (val ? val.name : 'Player'));\n  if (playerNames[0] === playerNames[1]) playerNames = playerNames.map((name, i) => `${name} ${i + 1}`);\n\n  const gameOver = isGameOver(gameArr);\n\n  const resetGame = () => {\n    setFirstPlayer(+!firstPlayer as 0 | 1);\n    setGameArr(newGameArray());\n    if (!players[0]) {\n      if (!!players[1]) {\n        setMessage('You are ' + ['O', 'X'][firstPlayer]);\n      } else {\n        setMessage(`${playerNames[firstPlayer]} is X!`);\n      }\n    }\n    setGameOverHandled(false);\n  };\n\n  const autoPlayCPUS = () => {\n    const maxGameCount = 1000;\n    if (players[0] && players[1] && gameCount <= maxGameCount) {\n      setTimeout(resetGame, 0);\n    }\n  };\n\n  const handlePlayerChange = (newPlayer: Player, playerIndex: PlayerIndex) => {\n    setPlayers([playerIndex === 0 ? newPlayer : players[0], playerIndex === 1 ? newPlayer : players[1]]);\n    setPlayerScores([0, 0]);\n    setGameCount(0);\n    resetGame();\n    setFirstPlayer(0);\n  };\n\n  if (gameOver && !gameOverHandled) {\n    if (gameOver[0] === '_') {\n      setMessage('Tie!');\n    } else {\n      const winner = getPlayerIndexFromSymbol(gameOver[0]);\n      const newPlayerScores = [...playerScores];\n      newPlayerScores[winner]++;\n      setPlayerScores(newPlayerScores);\n      setMessage(playerNames[winner] + ' wins!');\n    }\n    setGameCount(gameCount + 1);\n    setGameOverHandled(true);\n    autoPlayCPUS();\n  } else if (!gameOver) {\n    const currentSymbol = nextMove(gameArr) as XO;\n    const currentPlayerIndex = getPlayerIndexFromSymbol(currentSymbol);\n    if (players[currentPlayerIndex]) {\n      setGameArr((players[currentPlayerIndex] as CPU).makeMove(gameArr));\n    }\n  }\n\n  return (\n    <div className={styles.app}>\n      <Sidebar\n        players={players}\n        playerScores={playerScores}\n        playerNames={playerNames}\n        message={message}\n        isGameOver={!!gameOver}\n        newGame={resetGame}\n        handlePlayerChange={handlePlayerChange}\n      />\n      <Board gameArr={gameArr} setGameArr={setGameArr} />\n    </div>\n  );\n};\n\nexport default App;\n","import { SquareVal } from './SquareVal';\n\nexport type Line = [SquareVal, SquareVal, SquareVal];\n\nexport type GameArray = [Line, Line, Line];\n\nexport const newGameArray = (): GameArray => [['_', '_', '_'], ['_', '_', '_'], ['_', '_', '_']];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}